#include <iostream>

// Calculate the memory weight of an array
template<typename T, size_t N>
size_t memory_weight(T (&arr)[N]) {
    return N * sizeof(T);
}

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    size_t weight = memory_weight(arr);
    std::cout << "The memory weight of the array is: " << weight << " bytes" << std::endl;
    return 0;
}

// In this example, we define a function memory_weight that takes an array of any type and size as a reference parameter. The function returns the memory weight of the array in bytes, calculated by multiplying the number of elements in the array N by the size of each element sizeof(T).
// 
// We then test the function by creating an integer array arr and passing it to the memory_weight function. The result is printed to the console.
// 
// Note that the sizeof operator returns the size of the variable or type in bytes, and the size_t type is an unsigned integer type used to represent the size of objects in memory.
