#include <iostream>
#include <GL/glut.h>

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glBegin(GL_TRIANGLES);
    glColor3f(1.0, 0.0, 0.0);
    glVertex3f(-1.0, -1.0, 0.0);
    glColor3f(0.0, 1.0, 0.0);
    glVertex3f(1.0, -1.0, 0.0);
    glColor3f(0.0, 0.0, 1.0);
    glVertex3f(0.0, 1.0, 0.0);
    glEnd();
    glFlush();
}

void init() {
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0, 1.0, 0.1, 100.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(400, 400);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Simple Game Engine");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}

This is a very basic game engine that simply displays a single triangle. It uses the OpenGL graphics library and the GLUT library for windowing and event handling.

The display function is called by GLUT to draw the graphics on the screen. It clears the screen, sets the color of the triangle, specifies the vertices of the triangle, and draws the triangle.

The init function is called once at the beginning of the program to set up the projection and modelview matrices.

The main function initializes GLUT, sets the display mode, creates a window, sets up the initial state with init, specifies the display function to be called when the window needs to be redrawn, and enters the main event loop with glutMainLoop.

You can modify this code to create your own game engine by adding more functionality, such as input handling, physics, sound, and AI.
