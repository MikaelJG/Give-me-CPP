CHAPTER 2 (short sightseeing tout of a city)

C++ is a compiled language (necessity).
Compilers produce object files. These are linked, yielding an executable program.

A C++ programhas many source code files, calles "source files".

An executable program is not portable. Yet, the source code can be compiled and run on a variety of systems.

The ISO C++ standard defines two kinds of entities:
    - Core language features (char, int, etc.) and loops (for and while)
    - Standard-library components (containers [vector, map, etc] and I/O operations [<<, getline(), etc.])

The standard-library is ordinary C++ code. 
C++ is expressive and efficient enough for the most demanding system tasks.

C++ is a statically typed language.
The type of every entity (object, value, name and expression) must be given to compile.
The type of an object determine the set of operations applicable to it.

// Code start

in hello.cpp

int main(){} // defines a function called main. 
// main takes no arguments and does nothing.

{} // expresses groupings. 
// they indicate the stat and end of the function.

// comments in cpp
// comments are ignored by the compiler


// Code end

A C++ program must have exactly one global function named main().
The program starts by executing the main function.

The value the main function returns (int, if any) is returned to the system.
If main() doesn't return a value, the system will receive a value nonetheless. A value indicating success.
If main() returns a nonzero value, it indicates failure.

Not every system make use of that return value. Linux/Unix often do, Windows rarely do.

// Code start

in hello.cpp

#include <iostream>

int main(0
{
    std::cout << "Hello, World!\n"; // "Hello, World!\n" is a string literal
    // << is the operator ("put to")
    // the string is written to the standard output stream [std::cout]
}

// Code end

#include <iostream> instructs the compiler to include standard stream I/O facilities, found in iostream.
The operator << ("put to") writes its second argument to its first.

std::cout is the standard output stream. (std - standard, c language, out - output)
std:: specifies the name cout is found in the standard-library namespace.

all code is placed in function and called from main();

// in code

# include <iostream>

double square(double x) // a function named square, taking one argument: a double precision floating-point number
{
    return x*x
}

void print_square(double x) // a function named print_square, taking one argument.
// void is a return type. It indicates that a function does not return a value.
{
    std::count << "the square of" << x << " is " << square(x) << '\n'; // standard output stream
    // the function square() is used in the interpolation
}

int main()
{
    print_square(1.234); // "the square of 1.234 is 1.52276"
    print_square(5.555); // "the square of 5.555 is 30.858"
}

Every name, every expression, has a type. The type determines possible operations on it.
int inch; // inch is of type int, an integer variable.

Intrucing a name is a Declaration. Declare a type for the named entitity.
A type is a set of possible values and operations.
An object is some memory holding a value of some type. 
A value is a set of bits interpreted to a type.
A variable is a named object.






notation

model of memory

model of computation

code organization (procedural programming)

CHAPTER 3

abstraction mechanism

CHAPTER 6 (SYSTEMATIC PRESENTATION) (if 2nd is confusing)

/// Definitions

machine code
context switching
static typing
dynamic typing
compiler
garbage management
scripting
memory allocation

